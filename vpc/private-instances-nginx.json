{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "Create autoscaling EC2 groups for Nginx Reverse Proxy and needed cloudwatch alarms",

  "Parameters" : {
    "tagStack":{
      "Type": "String",
      "Description":"tag - stack name"
    },
    "tagProject":{
      "Type": "String",
      "Description":"tag - stack name"
    },
    "tagGroup":{
      "Type": "String",
      "Description":"tag - stack name"
    },
    "tagCostCenter":{
      "Type": "String",
      "Description":"tag - stack name"
    },
    "tagEnvironment":{
      "Type": "String",
      "Description":"tag - environment"
    },
    "tagKeepAlive":{
      "Type": "String",
      "Description":"tag - keep alive tag"
    },
    "tagOwner":{
      "Type": "String",
      "Description":"tag - product owner"
    },
    "instanceTypeNginx":{
      "Description" : "ec2 instance type for the nginx reverse proxy asg",
      "Type" : "String"
    },
    "ec2KeyPair" : {
      "Description" : "The EC2 Key Pair to allow SSH access to the instances",
      "Type" : "String",
      "ConstraintDescription" : "must be the name of an existing EC2 KeyPair."
    },
    "snsEc2Topic":{
      "Type": "String",
      "Description":"SNS Topic to handle ec2 asg notifications"
    },
    "privateSubnetId":{
      "Description" : "The ID of the private subnet.",
      "Type": "String"
    },
    "nginxSecurityGroup":{
      "Description" : "Security Group for nginx reverse proxy in private subnet",
      "Type":"AWS::EC2::SecurityGroup::Id"
    },
    "nginxInstanceProfile":{
      "Type": "String",
      "Description":"instance profile for nginx reverse proxy."
    },
    "bucketNameResources" : {
      "Description" : "The name of the bucket that contains your packaged source",
      "Type" : "String"
    },
    "architecture" : {
      "Description" : "AWSInstanceType2Arch mapping result",
      "Type" : "String"
    },
    "nginxElbName" : {
      "Description" : "Resource name for the ELB in front of the Nginx Reverse Proxy",
      "Type" : "String"
    },
    "latestAmiFunctionArn" : {
      "Description" : "The arn for the lambda function that looks up the latest Amazon Linux AMI",
      "Type" : "String"
    },
    "doNotCreate" : {
      "Description" : "If doNotCreateStack condition is present (\"Condition\" : \"doNotCreateStack\") in resource definition, then the resource is not created",
      "Default" : "true",
      "Type" : "String"
    }
  },

  "Conditions" : {
    "doNotCreateStack" : {"Fn::Equals" : [{"Ref" : "doNotCreate"}, "false"]}
  },

  "Resources" : {
    "latestAmiInfo": {
      "Type": "Custom::LatestAMIInfo",
      "Properties": {
        "ServiceToken": { "Ref" : "latestAmiFunctionArn" },
        "Region": { "Ref": "AWS::Region" },
        "Architecture": { "Ref": "architecture" }
      }
    },

    "nginxAutoScalingGroup" : {
      "Type" : "AWS::AutoScaling::AutoScalingGroup",
      "Properties" : {
        "LaunchConfigurationName" : { "Ref" : "nginxLaunchConfig" },
        "MinSize" : "1",
        "MaxSize" : "1",
        "LoadBalancerNames" : [ { "Ref" : "nginxElbName" } ],
        "VPCZoneIdentifier": [{"Ref": "privateSubnetId"}],
        "NotificationConfigurations" : [
          {
            "TopicARN" : { "Ref" : "snsEc2Topic" },
            "NotificationTypes" : [
              "autoscaling:EC2_INSTANCE_LAUNCH",
              "autoscaling:EC2_INSTANCE_LAUNCH_ERROR",
              "autoscaling:EC2_INSTANCE_TERMINATE",
              "autoscaling:EC2_INSTANCE_TERMINATE_ERROR"
            ]
          }
        ],
        "Tags": [
          {
            "Key":"stack",
            "Value": {"Ref": "tagStack"},
            "PropagateAtLaunch" : "true"
          },{
            "Key":"Name",
            "Value":{"Fn::Join":["-",[{"Ref": "tagStack"},"nginxAutoScalingGroup"]]},
            "PropagateAtLaunch" : "true"
          },{
            "Key":"project",
            "Value":{"Ref": "tagProject"},
            "PropagateAtLaunch" : "true"
          },{
            "Key":"group",
            "Value":{"Ref": "tagGroup"},
            "PropagateAtLaunch" : "true"
          },{
            "Key":"cost-center",
            "Value":{"Ref": "tagCostCenter"},
            "PropagateAtLaunch" : "true"
          },{
            "Key":"environment",
            "Value":{"Ref": "tagEnvironment"},
            "PropagateAtLaunch" : "true"
          },{
            "Key":"keep-alive",
            "Value":{"Ref": "tagKeepAlive"},
            "PropagateAtLaunch" : "true"
          },{
            "Key":"owner",
            "Value":{"Ref": "tagOwner"},
            "PropagateAtLaunch" : "true"
          }
        ]
      }
    },

    "nginxLaunchConfig" : {
      "Type" : "AWS::AutoScaling::LaunchConfiguration",
      "Metadata" : {
        "Comment" : "Provision Nginx Reverse Proxy server"
      },
      "Metadata" : {
        "Comment" : "Provision Nginx Reverse Proxy server.  Use shell script to install nginx via docker container and configure it to send traffic to api gateway, jenkins, and nagios",
        "AWS::CloudFormation::Init" : {
          "configSets" : {
            "Install" : [ "Install" ]
          },
          "Install" : {
            "packages" : {
              "yum" : {
                "aws-cli"      : []
              }
            }
          }
        }
      },
      "Properties" : {
        "AssociatePublicIpAddress" : "false",
        "ec2KeyPair" : { "Ref" : "ec2KeyPair" },
        "ImageId": { "Fn::GetAtt": [ "latestAmiInfo", "Id" ] },
        "IamInstanceProfile" : {"Ref":"nginxInstanceProfile"},
        "SecurityGroups" : [ { "Ref" : "nginxSecurityGroup" }],
        "InstanceType" : { "Ref" : "instanceTypeNginx" },
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash\n",
                "yum update -y\n",
                "yum install jq -y\n",
                "LOCATION_REGION=$(curl -s http://169.254.169.254/latest/dynamic/instance-identity/document/ | jq -r .region)\n",
                "S3_BUCKET=", { "Ref" : "bucketNameResources" }, "\n",
                "ENVIRONMENT=", { "Ref" : "tagEnvironment" }, "\n",
                "aws s3 --region $LOCATION_REGION cp s3://$S3_BUCKET/nginx-reverse-proxy/bootstrap-nginx-reverse-proxy.sh /tmp\n",
                "bash /tmp/bootstrap-nginx-reverse-proxy.sh $S3_BUCKET $ENVIRONMENT\n"
              ]
            ]
          }
        }
      }
    },

    "nginxCpuUtilizationAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Condition" : "doNotCreateStack",
      "Properties": {
        "AlarmDescription": "CPU Utilization > 75% for longer than 5 minutes",
        "Namespace": "AWS/EC2",
        "MetricName": "CPUUtilization",
        "Statistic": "Maximum",
        "Period": "300",
        "EvaluationPeriods": "1",
        "Threshold": "75",
        "Unit": "Percent",
        "ComparisonOperator": "GreaterThanThreshold",
        "Dimensions": [{
          "Name": "AutoScalingGroupName",
          "Value" : {"Ref" : "nginxAutoScalingGroup"}
        }],
        "AlarmActions": [{
          "Ref": "snsEc2Topic"
        }],
        "InsufficientDataActions": [{
          "Ref": "snsEc2Topic"
        }]
      }
    },

    "nginxNetworkInAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Condition" : "doNotCreateStack",
      "Properties": {
        "AlarmDescription": "Network In (Bytes/Sec > 2 MB for longer than 3 consecutive periods of 5 minutes)",
        "Namespace": "AWS/EC2",
        "MetricName": "NetworkIn",
        "Statistic": "Maximum",
        "Period": "300",
        "EvaluationPeriods": "3",
        "Threshold": "2000000",
        "Unit": "Bytes",
        "ComparisonOperator": "GreaterThanThreshold",
        "Dimensions": [{
          "Name": "AutoScalingGroupName",
          "Value" : {"Ref" : "nginxAutoScalingGroup"}
        }],
        "AlarmActions": [{
          "Ref": "snsEc2Topic"
        }],
        "InsufficientDataActions": [{
          "Ref": "snsEc2Topic"
        }]
      }
    },

    "nginxNetworkOutAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Condition" : "doNotCreateStack",
      "Properties": {
        "AlarmDescription": "Network Out (Bytes/Sec > 2 MB for longer than 3 consecutive periods of 5 minutes)",
        "Namespace": "AWS/EC2",
        "MetricName": "NetworkOut",
        "Statistic": "Maximum",
        "Period": "300",
        "EvaluationPeriods": "3",
        "Threshold": "2000000",
        "Unit": "Bytes",
        "ComparisonOperator": "GreaterThanThreshold",
        "Dimensions": [{
          "Name": "AutoScalingGroupName",
          "Value" : {"Ref" : "nginxAutoScalingGroup"}
        }],
        "AlarmActions": [{
          "Ref": "snsEc2Topic"
        }],
        "InsufficientDataActions": [{
          "Ref": "snsEc2Topic"
        }]
      }
    }
  },
  "Outputs" : {
    "amiId" : {
     "Description": "The Amazon EC2 instance AMI ID.",
     "Value" : { "Fn::GetAtt": [ "latestAmiInfo", "Id" ] }
    }
  }
}
