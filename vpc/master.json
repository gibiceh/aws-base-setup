{
	"AWSTemplateFormatVersion" : "2010-09-09",
<<<<<<< HEAD
	"Description" : "This nested stack will create the environment for the project infrastructure in an isolated VPC.",
=======
	"Description" : "This nested stack will create the environment in an isolated VPC.",
>>>>>>> 9b7d460039404db119ef7086991afccd58f2ce73
	"Parameters" : {
			"stackNameTag":{
				"Type": "String",
				"Description":"tag - stack name"
			},
			"projectTag":{
	      "Type": "String",
	      "Description":"tag - stack name"
	    },
	    "groupTag":{
	      "Type": "String",
	      "Description":"tag - stack name"
	    },
<<<<<<< HEAD
	    "costCenterTag":{
	      "Type": "String",
	      "Description":"tag - stack name"
	  	},
	    "environmentTag":{
	      "Type": "String",
	      "Description":"tag - environment",
=======
	    "environmentTag":{
	      "Type": "String",
	      "Description":"Tag - Environment",
>>>>>>> 9b7d460039404db119ef7086991afccd58f2ce73
				"AllowedValues" : ["sb", "test", "dev", "mergeddev", "qa", "prod"]
	    },
	    "keepAliveTag":{
	      "Type": "String",
<<<<<<< HEAD
	      "Description":"tag - keep alive tag"
	    },
	    "ownerTag":{
	      "Type": "String",
	      "Description":"tag - product owner"
=======
	      "Description":"Tag - Keep Alive tag"
	    },
	    "ownerTag":{
	      "Type": "String",
	      "Description":"Tag - product owner"
>>>>>>> 9b7d460039404db119ef7086991afccd58f2ce73
	    },
			"cfTemplateBucketName":{
				"Type":"String",
				"Description": "The name of the S3 bucket that holds the cloudformation templates used in nested stacks"
			},
			"resourcesBucketName":{
<<<<<<< HEAD
	    	"Type":"String",
	    	"Description": "The name of the S3 bucket that holds resource files for conductor"
	    },
			"sshSourceIp":{
				"Type":"String",
	    	"Description": "ip address to allow ssh access from"
			},
			"vpcCidr":{
				"Description" : "The CIDR block of the VPC",
 				"Type" : "String"
	  	},
	  	"publicSubnetCidr":{
	  		"Description" : "The CIDR block of the inbound public subnet.",
	   		"Type": "String"
	  	},
			"privateSubnetCidr":{
	     	"Description" : "The CIDR block of the primary private subnet.",
	   		"Type": "String"
	  	},
			"instanceTypeAppServer":{
	  		"Description" : "ec2 instance type for the app server",
	  		"Type" : "String"
	  	},
			"iamRoleNameAppServer": {
				"Type": "String",
				"Description": "name of the iam role for the app server"
			},
			"iamRoleNameCrossStackLookup": {
				"Type": "String",
				"Description": "name of the iam role that enables references of resources in another cloudformation stack"
			},
			"keyName": {
		  	"Description": "Name of an existing EC2 KeyPair to enable SSH access to the instances",
		  	"Type": "String",
		  	"ConstraintDescription" : "must be the name of an existing EC2 KeyPair."
			},
			"preliminariesStackName":{
	      "Type": "String",
				"Description": "The name of the preliminaries cloudformation stack"
	  	},
=======
				"Type":"String",
				"Description": "The name of the S3 bucket that holds resource files for conductor"
			},
			"preliminariesStackName":{
	      "Type": "String",
				"Description": "The name of the preliminaries cloudformation stack"
	  	},
			"vpcCidr":{
				"Description" : "The CIDR block of the VPC",
	 			"Type" : "String"
	  	},
	  	"publicSubnetCIDR":{
	  		"Description" : "The CIDR block of the inbound public subnet.",
	   		"Type": "String"
	  	},
			"privateSubnetCIDR":{
	     	"Description" : "The CIDR block of the primary private subnet.",
	   		"Type": "String"
	  	},
			"instanceTypeFlamenco":{
	  		"Description" : "ec2 instance type for the box running flamenco",
	  		"Type" : "String"
	  	},
			"keyName": {
		  	"Description": "Name of an existing EC2 KeyPair to enable SSH access to the instances",
		  	"Type": "AWS::EC2::KeyPair::KeyName",
		  	"ConstraintDescription" : "must be the name of an existing EC2 KeyPair."
			},
			"createAcmCert":{
	      "Type": "String",
				"Description": "true or false, depending on if the stack should create ACM cert for ELB"
	  	},
			"existingAcmCertArn":{
	      "Type": "String",
				"Description": "If createAcmCert=false, ELB will associate this cert arn with itself"
	  	},
			"acmCertDomains": {
		    "Description": "Comma-delimited list of the domains to be associated with acm cert",
		    "Type": "CommaDelimitedList"
			},
			"iamRoleFlamenco": {
				"Type": "String",
		    "Description": "name of the iam role assigned to the flamenco ec2 instances"
			},
			"iamRoleWebServer": {
				"Type": "String",
		    "Description": "name of the iam role assigned to the web server ec2 instances"
			},
>>>>>>> 9b7d460039404db119ef7086991afccd58f2ce73
			"doNotCreate" : {
	      "Description" : "If doNotCreateStack condition is present (\"Condition\" : \"doNotCreateStack\") in resource definition, then the resource is not created",
	      "Default" : "true",
	      "Type" : "String"
			}
  },

	"Conditions" : {
<<<<<<< HEAD
    "doNotCreateStack" : {"Fn::Equals" : [{"Ref" : "doNotCreate"}, "false"]}
  },

	"Resources" : {
		"baseNetwork": {
			"Type":"AWS::CloudFormation::Stack",
			"Properties" :{
				"Parameters" :{
					"stackNameTag": {"Ref" : "stackNameTag"},
					"projectTag": {"Ref" : "projectTag"},
					"groupTag": {"Ref" : "groupTag"},
					"costCenterTag": {"Ref" : "costCenterTag"},
					"environmentTag": {"Ref" : "environmentTag"},
					"keepAliveTag": {"Ref" : "keepAliveTag"},
					"ownerTag": {"Ref" : "ownerTag"},
					"vpcCidr": {"Ref" : "vpcCidr"}
				},
				"TemplateURL" : {"Fn::Join":["",["https://s3.amazonaws.com/", {"Ref": "cfTemplateBucketName"}, "/vpc/base-network.json"]]}
			}
		},

		"baseSecurity": {
			"Type":"AWS::CloudFormation::Stack",
			"Properties" :{
				"Parameters" :{
					"stackNameTag": {"Ref" : "stackNameTag"},
					"projectTag": {"Ref" : "projectTag"},
					"groupTag": {"Ref" : "groupTag"},
					"costCenterTag": {"Ref" : "costCenterTag"},
					"environmentTag": {"Ref" : "environmentTag"},
					"keepAliveTag": {"Ref" : "keepAliveTag"},
					"ownerTag": {"Ref" : "ownerTag"},
					"cfTemplateBucketName": {"Ref": "cfTemplateBucketName"},
					"vpcCidr": {"Ref" : "vpcCidr"},
					"publicSubnetCidr": {"Ref" : "publicSubnetCidr"},
					"privateSubnetCidr": {"Ref" : "privateSubnetCidr"},
					"sshSourceIp":{"Ref":"sshSourceIp"},
					"internetGatewayId": { "Fn::GetAtt" : [ "baseNetwork", "Outputs.internetGatewayId" ] },
					"vpcId": { "Fn::GetAtt" : [ "baseNetwork", "Outputs.vpcId" ] }
		    },
				"TemplateURL" : {"Fn::Join":["",["https://s3.amazonaws.com/", {"Ref": "cfTemplateBucketName"}, "/vpc/base-security.json"]]}
			},
			"DependsOn" : "baseNetwork"
		},

		"crossStackInfoPreliminariesStack": {
		  "Type": "Custom::CrossStackInfoSNSArn",
		  "Properties": {
		    "ServiceToken": { "Fn::GetAtt" : ["lambdaFunctions", "Outputs.lambdaArnCrossStackLookup"] },
=======
    "doNotCreateStack" : {"Fn::Equals" : [{"Ref" : "doNotCreate"}, "false"]},
		"createVpcStack" : {"Fn::Or": [{"Fn::Equals" : [{"Ref" : "environmentTag"}, "prod"]}, {"Fn::Equals" : [{"Ref" : "environmentTag"}, "dev"]}]}
  },

	"Resources" : {
		"vpcLookupCrossStackOutputs": {
		  "Type": "AWS::Lambda::Function",
			"Condition" : "createVpcStack",
		  "Properties": {
				"FunctionName" : {"Fn::Join":["-",[{"Ref": "environmentTag"}, {"Ref": "projectTag"}, "vpcLookupCrossStackOutputs"]]},
		    "Code": {
		      "ZipFile":  { "Fn::Join": ["\n", [
		        "var response = require('cfn-response');",
		        "exports.handler = function(event, context) {",
		        "    console.log('REQUEST RECEIVED:\\n', JSON.stringify(event));",
		        "    if (event.RequestType == 'Delete') {",
		        "        response.send(event, context, response.SUCCESS);",
		        "        return;",
		        "    }",
		        "    var stackName = event.ResourceProperties.StackName;",
		        "    var responseData = {};",
		        "    if (stackName) {",
		        "        var aws = require('aws-sdk');",
		        "        var cfn = new aws.CloudFormation();",
		        "        cfn.describeStacks({StackName: stackName}, function(err, data) {",
		        "            if (err) {",
		        "                responseData = {Error: 'DescribeStacks call failed'};",
		        "                console.log(responseData.Error + ':\\n', err);",
		        "                response.send(event, context, response.FAILED, responseData);",
		        "            }",
		        "            else {",
		        "                data.Stacks[0].Outputs.forEach(function(output) {",
		        "                    responseData[output.OutputKey] = output.OutputValue;",
		        "                });",
		        "                response.send(event, context, response.SUCCESS, responseData);",
		        "            }",
		        "        });",
		        "    } else {",
		        "        responseData = {Error: 'Stack name not specified'};",
		        "        console.log(responseData.Error);",
		        "        response.send(event, context, response.FAILED, responseData);",
		        "    }",
		        "};"
		      ]]}
		    },
		    "Handler": "index.handler",
		    "Runtime": "nodejs",
		    "Timeout": "30",
		    "Role": { "Fn::GetAtt" : ["vpcLookupCrossStackOutputsRole", "Arn"] }
		  },
			"DependsOn": "vpcLookupCrossStackOutputsRole"
		},

		"vpcLookupCrossStackOutputsRole": {
		  "Type": "AWS::IAM::Role",
			"Condition" : "createVpcStack",
		  "Properties": {
		    "AssumeRolePolicyDocument": {
		      "Version": "2012-10-17",
		      "Statement": [{
		        "Effect": "Allow",
		        "Principal": {"Service": ["lambda.amazonaws.com"]},
		        "Action": ["sts:AssumeRole"]
		      }]
		    },
		    "Path": "/",
		    "Policies": [{
		      "PolicyName" : {"Fn::Join":["-",[{"Ref": "environmentTag"}, {"Ref": "projectTag"}, "vpcLookupCrossStackOutputs"]]},
		      "PolicyDocument": {
		        "Version": "2012-10-17",
		        "Statement": [{
		          "Effect": "Allow",
		          "Action": ["logs:CreateLogGroup","logs:CreateLogStream","logs:PutLogEvents"],
		          "Resource": "arn:aws:logs:*:*:*"
		        },
		        {
		          "Effect": "Allow",
		          "Action": ["cloudformation:DescribeStacks"],
		          "Resource": "*"
		        }]
		      }
		    }]
		  }
		},

		"crossStackInfoPreliminariesStack": {
		  "Type": "Custom::crossStackInfoPreliminariesStack",
			"Condition" : "createVpcStack",
		  "Properties": {
		    "ServiceToken": { "Fn::GetAtt" : ["vpcLookupCrossStackOutputs", "Arn"] },
>>>>>>> 9b7d460039404db119ef7086991afccd58f2ce73
		    "stackNameTag": {
		      "Ref": "preliminariesStackName"
		    }
		  },
<<<<<<< HEAD
			"DependsOn": "lambdaFunctions"
		},

		"iamSetup":{
			"Type":"AWS::CloudFormation::Stack",
=======
			"DependsOn": "vpcLookupCrossStackOutputs"
		},

		"baseNetwork": {
			"Type":"AWS::CloudFormation::Stack",
			"Condition" : "createVpcStack",
>>>>>>> 9b7d460039404db119ef7086991afccd58f2ce73
			"Properties" :{
				"Parameters" :{
					"stackNameTag": {"Ref" : "stackNameTag"},
					"projectTag": {"Ref" : "projectTag"},
					"groupTag": {"Ref" : "groupTag"},
<<<<<<< HEAD
					"costCenterTag": {"Ref" : "costCenterTag"},
					"environmentTag": {"Ref" : "environmentTag"},
					"keepAliveTag": {"Ref" : "keepAliveTag"},
					"ownerTag": {"Ref" : "ownerTag"},
					"resourcesBucketName": {"Ref" : "resourcesBucketName"},
					"iamRoleNameAppServer": {"Ref" : "iamRoleNameAppServer"},
					"iamRoleNameCrossStackLookup": {"Ref" : "iamRoleNameCrossStackLookup"},
					"iamRoleNameDbServer": {"Ref" : "iamRoleNameDbServer"},
					"iamRoleNameFileServer": {"Ref" : "iamRoleNameFileServer"},
					"iamRoleNameRdGateway": {"Ref" : "iamRoleNameRdGateway"}
				},
				"TemplateURL" : {"Fn::Join":["",["https://s3.amazonaws.com/", {"Ref": "cfTemplateBucketName"}, "/vpc/iam-setup.json"]]}
			}
		},

		"lambdaFunctions": {
			"Type":"AWS::CloudFormation::Stack",
=======
					"environmentTag": {"Ref" : "environmentTag"},
					"keepAliveTag": {"Ref" : "keepAliveTag"},
					"ownerTag": {"Ref" : "ownerTag"},
					"vpcCidr": {"Ref" : "vpcCidr"}
				},
				"TemplateURL" : {"Fn::Join":["",["https://s3.amazonaws.com/", {"Ref": "cfTemplateBucketName"}, "/vpc/basenetwork.json"]]}
			}
		},

		"baseSecurity": {
			"Type":"AWS::CloudFormation::Stack",
			"Condition" : "createVpcStack",
>>>>>>> 9b7d460039404db119ef7086991afccd58f2ce73
			"Properties" :{
				"Parameters" :{
					"stackNameTag": {"Ref" : "stackNameTag"},
					"projectTag": {"Ref" : "projectTag"},
					"groupTag": {"Ref" : "groupTag"},
<<<<<<< HEAD
					"costCenterTag": {"Ref" : "costCenterTag"},
					"environmentTag": {"Ref" : "environmentTag"},
					"keepAliveTag": {"Ref" : "keepAliveTag"},
					"ownerTag": {"Ref" : "ownerTag"},
					"iamRoleArnCrossStackLookup": { "Fn::GetAtt" : [ "iamSetup", "Outputs.iamRoleArnCrossStackLookup" ] },
					"functionNameCrossStackLookup": {"Fn::Join":["-",[{"Ref": "environmentTag"}, {"Ref": "projectTag"}, "crossStackLookup"]]}
				},
				"TemplateURL" : {"Fn::Join":["",["https://s3.amazonaws.com/", {"Ref": "cfTemplateBucketName"}, "/vpc/lambda-functions.json"]]}
			},
			"DependsOn": ["iamSetup"]
=======
					"environmentTag": {"Ref" : "environmentTag"},
					"keepAliveTag": {"Ref" : "keepAliveTag"},
					"ownerTag": {"Ref" : "ownerTag"},
					"cfTemplateBucketName": {"Ref" : "cfTemplateBucketName"},
					"vpcCidr": {"Ref" : "vpcCidr"},
					"publicSubnetCIDR": {"Ref" : "publicSubnetCIDR"},
					"privateSubnetCIDR": {"Ref" : "privateSubnetCIDR"},
					"internetGatewayId": { "Fn::GetAtt" : [ "baseNetwork", "Outputs.internetGatewayId" ] },
					"vpcId": { "Fn::GetAtt" : [ "baseNetwork", "Outputs.vpcId" ] }
		    },
				"TemplateURL" : {"Fn::Join":["",["https://s3.amazonaws.com/", {"Ref": "cfTemplateBucketName"}, "/vpc/basesecurity.json"]]}
			},
			"DependsOn" : "baseNetwork"
>>>>>>> 9b7d460039404db119ef7086991afccd58f2ce73
		},

		"securityGroups":{
			"Type":"AWS::CloudFormation::Stack",
<<<<<<< HEAD
=======
			"Condition" : "createVpcStack",
>>>>>>> 9b7d460039404db119ef7086991afccd58f2ce73
			"Properties" :{
				"Parameters" :{
					"stackNameTag": {"Ref" : "stackNameTag"},
					"projectTag": {"Ref" : "projectTag"},
					"groupTag": {"Ref" : "groupTag"},
<<<<<<< HEAD
					"costCenterTag": {"Ref" : "costCenterTag"},
					"environmentTag": {"Ref" : "environmentTag"},
					"keepAliveTag": {"Ref" : "keepAliveTag"},
					"ownerTag": {"Ref" : "ownerTag"},
					"cfTemplateBucketName": {"Ref": "cfTemplateBucketName"},
					"vpcId": { "Fn::GetAtt" : [ "baseNetwork", "Outputs.vpcId" ] },
					"sshSourceIp":{"Ref":"sshSourceIp"}
				},
				"TemplateURL" : {"Fn::Join":["",["https://s3.amazonaws.com/", {"Ref": "cfTemplateBucketName"}, "/vpc/security-groups.json"]]}
=======
					"environmentTag": {"Ref" : "environmentTag"},
					"keepAliveTag": {"Ref" : "keepAliveTag"},
					"ownerTag": {"Ref" : "ownerTag"},
					"cfTemplateBucketName": {"Ref" : "cfTemplateBucketName"},
					"vpcId": { "Fn::GetAtt" : [ "baseNetwork", "Outputs.vpcId" ] }
				},
				"TemplateURL" : {"Fn::Join":["",["https://s3.amazonaws.com/", {"Ref": "cfTemplateBucketName"}, "/vpc/securitygroups.json"]]}
>>>>>>> 9b7d460039404db119ef7086991afccd58f2ce73
			},
			"DependsOn" : "baseSecurity"
		},

		"vpcEndPoints":{
			"Type":"AWS::CloudFormation::Stack",
<<<<<<< HEAD
=======
			"Condition" : "createVpcStack",
>>>>>>> 9b7d460039404db119ef7086991afccd58f2ce73
			"Properties" :{
				"Parameters" :{
					"stackNameTag": {"Ref" : "stackNameTag"},
					"projectTag": {"Ref" : "projectTag"},
					"groupTag": {"Ref" : "groupTag"},
<<<<<<< HEAD
					"costCenterTag": {"Ref" : "costCenterTag"},
=======
>>>>>>> 9b7d460039404db119ef7086991afccd58f2ce73
					"environmentTag": {"Ref" : "environmentTag"},
					"keepAliveTag": {"Ref" : "keepAliveTag"},
					"ownerTag": {"Ref" : "ownerTag"},
					"vpcId": { "Fn::GetAtt" : [ "baseNetwork", "Outputs.vpcId" ] },
					"internalRouteTableId": { "Fn::GetAtt" : [ "baseSecurity", "Outputs.internalRouteTableId" ] },
					"publicRouteTableId": { "Fn::GetAtt" : [ "baseSecurity", "Outputs.publicRouteTableId" ] },
					"resourcesBucketName": {"Ref" : "resourcesBucketName"}
				},
				"TemplateURL" : {"Fn::Join":["",["https://s3.amazonaws.com/", {"Ref": "cfTemplateBucketName"}, "/vpc/vpc-endpoints.json"]]}
			},
			"DependsOn" : "baseSecurity"
<<<<<<< HEAD
		}
	},
	"Outputs" : {
		"vpcId" : {
      "Description" : "The ID of the VPC created",
      "Value" : { "Fn::GetAtt" : [ "baseNetwork", "Outputs.vpcId" ] }
    }
	}
=======
		},

		"iamRoles":{
			"Type":"AWS::CloudFormation::Stack",
			"Condition" : "createVpcStack",
			"Properties" :{
				"Parameters" :{
					"stackNameTag": {"Ref" : "stackNameTag"},
					"projectTag": {"Ref" : "projectTag"},
					"groupTag": {"Ref" : "groupTag"},
					"environmentTag": {"Ref" : "environmentTag"},
					"keepAliveTag": {"Ref" : "keepAliveTag"},
					"ownerTag": {"Ref" : "ownerTag"},
					"resourcesBucketName": {"Ref" : "resourcesBucketName"},
					"lambdaCustomResourceGeneratorArn": { "Fn::GetAtt": [ "crossStackInfoPreliminariesStack", "lambdaCustomResourceGeneratorArn" ] },
					"iamRoleFlamenco": {"Ref" : "iamRoleFlamenco"},
					"iamRoleWebServer": {"Ref" : "iamRoleWebServer"}
				},
				"TemplateURL" : {"Fn::Join":["",["https://s3.amazonaws.com/", {"Ref": "cfTemplateBucketName"}, "/vpc/iam-setup.json"]]}
			}
		}
	},
	"Outputs" : {}
>>>>>>> 9b7d460039404db119ef7086991afccd58f2ce73
}
