{
	"AWSTemplateFormatVersion" : "2010-09-09",
	"Description" : "This nested stack will create the vpc resources for the project.",
	"Parameters" : {
		"tagCostCenter":{
      "Type": "String",
      "Description":"tag - cost center"
    },
    "tagEnvironment":{
      "Type": "String",
      "Description":"tag - environment",
      "AllowedValues" : ["sb", "test", "dev", "mergeddev", "qa", "prod"]
    },
    "tagGroup":{
      "Type": "String",
      "Description":"tag - group name"
    },
    "tagKeepAlive":{
      "Type": "String",
      "Description":"tag - keep alive tag",
      "AllowedValues" : ["true", "false"]
    },
    "tagOwner":{
      "Type": "String",
      "Description":"tag - product owner"
    },
    "tagProject":{
      "Type": "String",
      "Description":"tag - project name"
    },
    "tagStack":{
	    "Type": "String",
	    "Description":"tag - stack name"
	  },
		"bucketNameCfTemplates":{
			"Type":"String",
			"Description": "The name of the S3 bucket that holds the cloudformation templates used in nested stacks"
		},
		"bucketNameResources":{
    	"Type":"String",
    	"Description": "The name of the S3 bucket that holds resources (installation files, configuration files) needed for the environment."
    },
		"cidrPrivateSubnet":{
     	"Description" : "The CIDR block of the primary private subnet.",
   		"Type": "String"
  	},
		"cidrPublicSubnet":{
  		"Description" : "The CIDR block of the primary public subnet.",
   		"Type": "String"
  	},
		"cidrSshSource":{
			"Type":"String",
    	"Description": "ip cidr block to allow ssh access from"
		},
		"cidrVpc":{
			"Description" : "The CIDR block of the VPC",
			"Type" : "String"
  	},
		"ec2KeyPair": {
	  	"Description": "Name of an existing EC2 KeyPair to enable SSH access to the instances",
	  	"Type": "String",
	  	"ConstraintDescription" : "must be the name of an existing EC2 KeyPair."
		},
		"instTypeAppServer":{
  		"Description" : "ec2 instance type for the app server",
  		"Type" : "String"
  	},
		"roleNameAppServer": {
			"Type": "String",
			"Description": "name of the iam role for the app server"
		},
		"stackNamePreliminaries":{
      "Type": "String",
			"Description": "The name of the preliminaries cloudformation stack"
	  },		
		"doNotCreate" : {
	    "Description" : "If doNotCreateStack condition is present (\"Condition\" : \"doNotCreateStack\") in resource definition, then the resource is not created",
	    "Default" : "true",
	    "Type" : "String"
		}
  },

	"Conditions" : {
    "doNotCreateStack" : {"Fn::Equals" : [{"Ref" : "doNotCreate"}, "false"]}
  },

	"Resources" : {
		"baseNetwork": {
			"Type":"AWS::CloudFormation::Stack",
			"Metadata": {
				"Comment":"Creates the network entities for the environment."
			},
			"Properties" :{
				"Parameters" :{
					"tagCostCenter": {"Ref" : "tagCostCenter"},
          "tagEnvironment": {"Ref" : "tagEnvironment"},
          "tagGroup": {"Ref" : "tagGroup"},
					"tagKeepAlive": {"Ref" : "tagKeepAlive"},
					"tagOwner": {"Ref" : "tagOwner"},
          "tagProject": {"Ref" : "tagProject"},
          "tagStack": {"Ref" : "tagStack"},
					"cidrVpc": {"Ref" : "cidrVpc"}
				},
				"TemplateURL" : {"Fn::Join":["",["https://s3.amazonaws.com/", {"Ref": "bucketNameCfTemplates"}, "/vpc/base-network.json"]]}
			}
		},

		"baseSecurity": {
			"Type":"AWS::CloudFormation::Stack",
			"Properties" :{
				"Parameters" :{
					"tagCostCenter": {"Ref" : "tagCostCenter"},
          "tagEnvironment": {"Ref" : "tagEnvironment"},
          "tagGroup": {"Ref" : "tagGroup"},
					"tagKeepAlive": {"Ref" : "tagKeepAlive"},
					"tagOwner": {"Ref" : "tagOwner"},
          "tagProject": {"Ref" : "tagProject"},
          "tagStack": {"Ref" : "tagStack"},
					"bucketNameCfTemplates": {"Ref": "bucketNameCfTemplates"},
					"cidrVpc": {"Ref" : "cidrVpc"},
					"cidrPublicSubnet": {"Ref" : "cidrPublicSubnet"},
					"cidrPrivateSubnet": {"Ref" : "cidrPrivateSubnet"},
					"cidrSshSource":{"Ref":"cidrSshSource"},
					"internetGatewayId": { "Fn::GetAtt" : [ "baseNetwork", "Outputs.internetGatewayId" ] },
					"vpcId": { "Fn::GetAtt" : [ "baseNetwork", "Outputs.vpcId" ] }
		    },
				"TemplateURL" : {"Fn::Join":["",["https://s3.amazonaws.com/", {"Ref": "bucketNameCfTemplates"}, "/vpc/base-security.json"]]}
			},
			"DependsOn" : "baseNetwork"
		},

		"crossStackInfoPreliminariesStack": {
		  "Type": "Custom::CrossStackInfoSNSArn",
		  "Properties": {
		    "ServiceToken": { "Fn::GetAtt" : ["lambdaSetup", "Outputs.lambdaArnCrossStackLookup"] },
=======
    "doNotCreateStack" : {"Fn::Equals" : [{"Ref" : "doNotCreate"}, "false"]},
		"createVpcStack" : {"Fn::Or": [{"Fn::Equals" : [{"Ref" : "tagEnvironment"}, "prod"]}, {"Fn::Equals" : [{"Ref" : "tagEnvironment"}, "dev"]}]}
  },

	"Resources" : {
		"vpcLookupCrossStackOutputs": {
		  "Type": "AWS::Lambda::Function",
			"Condition" : "createVpcStack",
		  "Properties": {
				"FunctionName" : {"Fn::Join":["-",[{"Ref": "tagEnvironment"}, {"Ref": "tagProject"}, "vpcLookupCrossStackOutputs"]]},
		    "Code": {
		      "ZipFile":  { "Fn::Join": ["\n", [
		        "var response = require('cfn-response');",
		        "exports.handler = function(event, context) {",
		        "    console.log('REQUEST RECEIVED:\\n', JSON.stringify(event));",
		        "    if (event.RequestType == 'Delete') {",
		        "        response.send(event, context, response.SUCCESS);",
		        "        return;",
		        "    }",
		        "    var stackName = event.ResourceProperties.StackName;",
		        "    var responseData = {};",
		        "    if (stackName) {",
		        "        var aws = require('aws-sdk');",
		        "        var cfn = new aws.CloudFormation();",
		        "        cfn.describeStacks({StackName: stackName}, function(err, data) {",
		        "            if (err) {",
		        "                responseData = {Error: 'DescribeStacks call failed'};",
		        "                console.log(responseData.Error + ':\\n', err);",
		        "                response.send(event, context, response.FAILED, responseData);",
		        "            }",
		        "            else {",
		        "                data.Stacks[0].Outputs.forEach(function(output) {",
		        "                    responseData[output.OutputKey] = output.OutputValue;",
		        "                });",
		        "                response.send(event, context, response.SUCCESS, responseData);",
		        "            }",
		        "        });",
		        "    } else {",
		        "        responseData = {Error: 'Stack name not specified'};",
		        "        console.log(responseData.Error);",
		        "        response.send(event, context, response.FAILED, responseData);",
		        "    }",
		        "};"
		      ]]}
		    },
		    "Handler": "index.handler",
		    "Runtime": "nodejs",
		    "Timeout": "30",
		    "Role": { "Fn::GetAtt" : ["vpcLookupCrossStackOutputsRole", "Arn"] }
		  },
			"DependsOn": "vpcLookupCrossStackOutputsRole"
		},

		"vpcLookupCrossStackOutputsRole": {
		  "Type": "AWS::IAM::Role",
			"Condition" : "createVpcStack",
		  "Properties": {
		    "AssumeRolePolicyDocument": {
		      "Version": "2012-10-17",
		      "Statement": [{
		        "Effect": "Allow",
		        "Principal": {"Service": ["lambda.amazonaws.com"]},
		        "Action": ["sts:AssumeRole"]
		      }]
		    },
		    "Path": "/",
		    "Policies": [{
		      "PolicyName" : {"Fn::Join":["-",[{"Ref": "tagEnvironment"}, {"Ref": "tagProject"}, "vpcLookupCrossStackOutputs"]]},
		      "PolicyDocument": {
		        "Version": "2012-10-17",
		        "Statement": [{
		          "Effect": "Allow",
		          "Action": ["logs:CreateLogGroup","logs:CreateLogStream","logs:PutLogEvents"],
		          "Resource": "arn:aws:logs:*:*:*"
		        },
		        {
		          "Effect": "Allow",
		          "Action": ["cloudformation:DescribeStacks"],
		          "Resource": "*"
		        }]
		      }
		    }]
		  }
		},

		"crossStackInfoPreliminariesStack": {
		  "Type": "Custom::crossStackInfoPreliminariesStack",
			"Condition" : "createVpcStack",
		  "Properties": {
		    "ServiceToken": { "Fn::GetAtt" : ["vpcLookupCrossStackOutputs", "Arn"] },
>>>>>>> 9b7d460039404db119ef7086991afccd58f2ce73
		    "tagStack": {
		      "Ref": "stackNamePreliminaries"
		    }
		  },
<<<<<<< HEAD
			"DependsOn": "lambdaSetup"
		},

		"iamSetup":{
			"Type":"AWS::CloudFormation::Stack",
=======
			"DependsOn": "vpcLookupCrossStackOutputs"
		},

		"baseNetwork": {
			"Type":"AWS::CloudFormation::Stack",
			"Condition" : "createVpcStack",
>>>>>>> 9b7d460039404db119ef7086991afccd58f2ce73
			"Properties" :{
				"Parameters" :{
					"tagStack": {"Ref" : "tagStack"},
					"tagProject": {"Ref" : "tagProject"},
					"tagGroup": {"Ref" : "tagGroup"},
<<<<<<< HEAD
					"tagCostCenter": {"Ref" : "tagCostCenter"},
					"tagEnvironment": {"Ref" : "tagEnvironment"},
					"tagKeepAlive": {"Ref" : "tagKeepAlive"},
					"tagOwner": {"Ref" : "tagOwner"},
					"bucketNameResources": {"Ref" : "bucketNameResources"},
					"roleNameAppServer": {"Ref" : "roleNameAppServer"},
					"iamRoleNameCrossStackLookup": {"Ref" : "iamRoleNameCrossStackLookup"},
					"iamRoleNameDbServer": {"Ref" : "iamRoleNameDbServer"},
					"iamRoleNameFileServer": {"Ref" : "iamRoleNameFileServer"},
					"iamRoleNameRdGateway": {"Ref" : "iamRoleNameRdGateway"}
				},
				"TemplateURL" : {"Fn::Join":["",["https://s3.amazonaws.com/", {"Ref": "bucketNameCfTemplates"}, "/vpc/iam-setup.json"]]}
			}
		},

		"lambdaSetup": {
			"Type":"AWS::CloudFormation::Stack",
=======
					"tagEnvironment": {"Ref" : "tagEnvironment"},
					"tagKeepAlive": {"Ref" : "tagKeepAlive"},
					"tagOwner": {"Ref" : "tagOwner"},
					"cidrVpc": {"Ref" : "cidrVpc"}
				},
				"TemplateURL" : {"Fn::Join":["",["https://s3.amazonaws.com/", {"Ref": "bucketNameCfTemplates"}, "/vpc/basenetwork.json"]]}
			}
		},

		"baseSecurity": {
			"Type":"AWS::CloudFormation::Stack",
			"Condition" : "createVpcStack",
>>>>>>> 9b7d460039404db119ef7086991afccd58f2ce73
			"Properties" :{
				"Parameters" :{
					"tagStack": {"Ref" : "tagStack"},
					"tagProject": {"Ref" : "tagProject"},
					"tagGroup": {"Ref" : "tagGroup"},
<<<<<<< HEAD
					"tagCostCenter": {"Ref" : "tagCostCenter"},
					"tagEnvironment": {"Ref" : "tagEnvironment"},
					"tagKeepAlive": {"Ref" : "tagKeepAlive"},
					"tagOwner": {"Ref" : "tagOwner"},
					"iamRoleArnCrossStackLookup": { "Fn::GetAtt" : [ "iamSetup", "Outputs.iamRoleArnCrossStackLookup" ] },
					"functionNameCrossStackLookup": {"Fn::Join":["-",[{"Ref": "tagEnvironment"}, {"Ref": "tagProject"}, "crossStackLookup"]]}
				},
				"TemplateURL" : {"Fn::Join":["",["https://s3.amazonaws.com/", {"Ref": "bucketNameCfTemplates"}, "/vpc/lambda-functions.json"]]}
			},
			"DependsOn": ["iamSetup"]
=======
					"tagEnvironment": {"Ref" : "tagEnvironment"},
					"tagKeepAlive": {"Ref" : "tagKeepAlive"},
					"tagOwner": {"Ref" : "tagOwner"},
					"bucketNameCfTemplates": {"Ref" : "bucketNameCfTemplates"},
					"cidrVpc": {"Ref" : "cidrVpc"},
					"cidrPublicSubnet": {"Ref" : "cidrPublicSubnet"},
					"cidrPrivateSubnet": {"Ref" : "cidrPrivateSubnet"},
					"internetGatewayId": { "Fn::GetAtt" : [ "baseNetwork", "Outputs.internetGatewayId" ] },
					"vpcId": { "Fn::GetAtt" : [ "baseNetwork", "Outputs.vpcId" ] }
		    },
				"TemplateURL" : {"Fn::Join":["",["https://s3.amazonaws.com/", {"Ref": "bucketNameCfTemplates"}, "/vpc/basesecurity.json"]]}
			},
			"DependsOn" : "baseNetwork"
>>>>>>> 9b7d460039404db119ef7086991afccd58f2ce73
		},

		"securityGroups":{
			"Type":"AWS::CloudFormation::Stack",
<<<<<<< HEAD
=======
			"Condition" : "createVpcStack",
>>>>>>> 9b7d460039404db119ef7086991afccd58f2ce73
			"Properties" :{
				"Parameters" :{
					"tagStack": {"Ref" : "tagStack"},
					"tagProject": {"Ref" : "tagProject"},
					"tagGroup": {"Ref" : "tagGroup"},
<<<<<<< HEAD
					"tagCostCenter": {"Ref" : "tagCostCenter"},
					"tagEnvironment": {"Ref" : "tagEnvironment"},
					"tagKeepAlive": {"Ref" : "tagKeepAlive"},
					"tagOwner": {"Ref" : "tagOwner"},
					"bucketNameCfTemplates": {"Ref": "bucketNameCfTemplates"},
					"vpcId": { "Fn::GetAtt" : [ "baseNetwork", "Outputs.vpcId" ] },
					"cidrSshSource":{"Ref":"cidrSshSource"}
				},
				"TemplateURL" : {"Fn::Join":["",["https://s3.amazonaws.com/", {"Ref": "bucketNameCfTemplates"}, "/vpc/security-groups.json"]]}
=======
					"tagEnvironment": {"Ref" : "tagEnvironment"},
					"tagKeepAlive": {"Ref" : "tagKeepAlive"},
					"tagOwner": {"Ref" : "tagOwner"},
					"bucketNameCfTemplates": {"Ref" : "bucketNameCfTemplates"},
					"vpcId": { "Fn::GetAtt" : [ "baseNetwork", "Outputs.vpcId" ] }
				},
				"TemplateURL" : {"Fn::Join":["",["https://s3.amazonaws.com/", {"Ref": "bucketNameCfTemplates"}, "/vpc/securitygroups.json"]]}
>>>>>>> 9b7d460039404db119ef7086991afccd58f2ce73
			},
			"DependsOn" : "baseSecurity"
		},

		"vpcEndPoints":{
			"Type":"AWS::CloudFormation::Stack",
<<<<<<< HEAD
=======
			"Condition" : "createVpcStack",
>>>>>>> 9b7d460039404db119ef7086991afccd58f2ce73
			"Properties" :{
				"Parameters" :{
					"tagStack": {"Ref" : "tagStack"},
					"tagProject": {"Ref" : "tagProject"},
					"tagGroup": {"Ref" : "tagGroup"},
<<<<<<< HEAD
					"tagCostCenter": {"Ref" : "tagCostCenter"},
=======
>>>>>>> 9b7d460039404db119ef7086991afccd58f2ce73
					"tagEnvironment": {"Ref" : "tagEnvironment"},
					"tagKeepAlive": {"Ref" : "tagKeepAlive"},
					"tagOwner": {"Ref" : "tagOwner"},
					"vpcId": { "Fn::GetAtt" : [ "baseNetwork", "Outputs.vpcId" ] },
					"internalRouteTableId": { "Fn::GetAtt" : [ "baseSecurity", "Outputs.internalRouteTableId" ] },
					"publicRouteTableId": { "Fn::GetAtt" : [ "baseSecurity", "Outputs.publicRouteTableId" ] },
					"bucketNameResources": {"Ref" : "bucketNameResources"}
				},
				"TemplateURL" : {"Fn::Join":["",["https://s3.amazonaws.com/", {"Ref": "bucketNameCfTemplates"}, "/vpc/vpc-endpoints.json"]]}
			},
			"DependsOn" : "baseSecurity"
<<<<<<< HEAD
		}
	},
	"Outputs" : {
		"vpcId" : {
      "Description" : "The ID of the VPC created",
      "Value" : { "Fn::GetAtt" : [ "baseNetwork", "Outputs.vpcId" ] }
    }
	}
=======
		},

		"iamRoles":{
			"Type":"AWS::CloudFormation::Stack",
			"Condition" : "createVpcStack",
			"Properties" :{
				"Parameters" :{
					"tagStack": {"Ref" : "tagStack"},
					"tagProject": {"Ref" : "tagProject"},
					"tagGroup": {"Ref" : "tagGroup"},
					"tagEnvironment": {"Ref" : "tagEnvironment"},
					"tagKeepAlive": {"Ref" : "tagKeepAlive"},
					"tagOwner": {"Ref" : "tagOwner"},
					"bucketNameResources": {"Ref" : "bucketNameResources"},
					"lambdaCustomResourceGeneratorArn": { "Fn::GetAtt": [ "crossStackInfoPreliminariesStack", "lambdaCustomResourceGeneratorArn" ] },
					"iamRoleFlamenco": {"Ref" : "iamRoleFlamenco"},
					"iamRoleWebServer": {"Ref" : "iamRoleWebServer"}
				},
				"TemplateURL" : {"Fn::Join":["",["https://s3.amazonaws.com/", {"Ref": "bucketNameCfTemplates"}, "/vpc/iam-setup.json"]]}
			}
		}
	},
	"Outputs" : {}
>>>>>>> 9b7d460039404db119ef7086991afccd58f2ce73
}
