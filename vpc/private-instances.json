{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "Create autoscaling EC2 groups for Nginx Reverse Proxy, Jenkins, Nagios, and an ELB for Reverse Proxy (with cloudwatch alarms for ELB and Nginx), also create ssl cert for elb using ACM custom resource",

  "Parameters" : {
    "stackNameTag":{
      "Type": "String",
      "Description":"tag - stack name"
    },
    "projectTag":{
      "Type": "String",
      "Description":"tag - stack name"
    },
    "groupTag":{
      "Type": "String",
      "Description":"tag - stack name"
    },
    "costCenterTag":{
      "Type": "String",
      "Description":"tag - stack name"
    },
    "environmentTag":{
      "Type": "String",
      "Description":"tag - environment"
    },
    "keepAliveTag":{
      "Type": "String",
      "Description":"tag - keep alive tag"
    },
    "ownerTag":{
      "Type": "String",
      "Description":"tag - product owner"
    },
    "domainName":{
      "Type":"String",
      "Description": "The domain name that a ssl certificate will be created for using acm"
    },
    "instanceTypeJenkins":{
      "Description" : "ec2 instance type for the jenkins asg",
      "Type" : "String"
    },
    "instanceTypeNagios":{
      "Description" : "ec2 instance type for the nagios asg",
      "Type" : "String"
    },
    "instanceTypeNginx":{
      "Description" : "ec2 instance type for the nginx reverse proxy asg",
      "Type" : "String"
    },
    "keyName" : {
      "Description" : "The EC2 Key Pair to allow SSH access to the instances",
      "Type" : "String",
      "ConstraintDescription" : "must be the name of an existing EC2 KeyPair."
    },
    "snsEc2Topic":{
      "Type": "String",
      "Description":"SNS Topic to handle ec2 asg notifications"
    },
    "publicSubnetId":{
      "Description" : "The ID of the public subnet.",
      "Type": "String"
    },
    "privateSubnetId":{
      "Description" : "The ID of the private subnet.",
      "Type": "String"
    },
    "nginxSecurityGroup":{
      "Description" : "Security Group for nginx reverse proxy in private subnet",
      "Type":"AWS::EC2::SecurityGroup::Id"
    },
    "nginxInstanceProfile":{
      "Type": "String",
      "Description":"instance profile for nginx reverse proxy."
    },
    "jenkinsSecurityGroup":{
      "Description" : "Security Group for jenkins in private subnet",
      "Type":"AWS::EC2::SecurityGroup::Id"
    },
    "jenkinsInstanceProfile":{
      "Type": "String",
      "Description":"instance profile for jenkins."
    },
    "nagiosSecurityGroup":{
      "Description" : "Security Group for nagios in private subnet",
      "Type":"AWS::EC2::SecurityGroup::Id"
    },
    "nagiosInstanceProfile":{
      "Type": "String",
      "Description":"instance profile for nagios."
    },
    "elbUtilityVpcSecurityGroup":{
      "Description" : "Security Group for the ELB to handle traffic for nginx reverse proxy",
      "Type":"AWS::EC2::SecurityGroup::Id"
    },
    "cfTemplateBucketName":{
      "Type":"String",
      "Description": "The name of the S3 bucket that holds the cloudformation templates used in nested stacks"
    },
    "resourcesBucketName" : {
      "Description" : "The name of the bucket that contains your packaged source",
      "Type" : "String"
    },
    "latestAmiFunctionArn" : {
      "Description" : "The arn for the lambda function that looks up the latest Amazon Linux AMI",
      "Type" : "String"
    },
    "doNotCreate" : {
      "Description" : "If doNotCreateStack condition is present (\"Condition\" : \"doNotCreateStack\") in resource definition, then the resource is not created",
      "Default" : "true",
      "Type" : "String"
    }
  },

  "Conditions" : {
    "doNotCreateStack" : {"Fn::Equals" : [{"Ref" : "doNotCreate"}, "false"]}
  },

  "Mappings" : {
    "AWSInstanceType2Arch" : {
      "t1.micro"    : { "Arch" : "PV64"   },
      "t2.micro"    : { "Arch" : "HVM64"  },
      "t2.small"    : { "Arch" : "HVM64"  },
      "t2.medium"   : { "Arch" : "HVM64"  },
      "m1.small"    : { "Arch" : "PV64"   },
      "m1.medium"   : { "Arch" : "PV64"   },
      "m1.large"    : { "Arch" : "PV64"   },
      "m1.xlarge"   : { "Arch" : "PV64"   },
      "m2.xlarge"   : { "Arch" : "PV64"   },
      "m2.2xlarge"  : { "Arch" : "PV64"   },
      "m2.4xlarge"  : { "Arch" : "PV64"   },
      "m3.medium"   : { "Arch" : "HVM64"  },
      "m3.large"    : { "Arch" : "HVM64"  },
      "m3.xlarge"   : { "Arch" : "HVM64"  },
      "m3.2xlarge"  : { "Arch" : "HVM64"  },
      "c1.medium"   : { "Arch" : "PV64"   },
      "c1.xlarge"   : { "Arch" : "PV64"   },
      "c3.large"    : { "Arch" : "HVM64"  },
      "c3.xlarge"   : { "Arch" : "HVM64"  },
      "c3.2xlarge"  : { "Arch" : "HVM64"  },
      "c3.4xlarge"  : { "Arch" : "HVM64"  },
      "c3.8xlarge"  : { "Arch" : "HVM64"  },
      "c4.large"    : { "Arch" : "HVM64"  },
      "c4.xlarge"   : { "Arch" : "HVM64"  },
      "c4.2xlarge"  : { "Arch" : "HVM64"  },
      "c4.4xlarge"  : { "Arch" : "HVM64"  },
      "c4.8xlarge"  : { "Arch" : "HVM64"  },
      "g2.2xlarge"  : { "Arch" : "HVMG2"  },
      "r3.large"    : { "Arch" : "HVM64"  },
      "r3.xlarge"   : { "Arch" : "HVM64"  },
      "r3.2xlarge"  : { "Arch" : "HVM64"  },
      "r3.4xlarge"  : { "Arch" : "HVM64"  },
      "r3.8xlarge"  : { "Arch" : "HVM64"  },
      "i2.xlarge"   : { "Arch" : "HVM64"  },
      "i2.2xlarge"  : { "Arch" : "HVM64"  },
      "i2.4xlarge"  : { "Arch" : "HVM64"  },
      "i2.8xlarge"  : { "Arch" : "HVM64"  },
      "d2.xlarge"   : { "Arch" : "HVM64"  },
      "d2.2xlarge"  : { "Arch" : "HVM64"  },
      "d2.4xlarge"  : { "Arch" : "HVM64"  },
      "d2.8xlarge"  : { "Arch" : "HVM64"  },
      "hi1.4xlarge" : { "Arch" : "HVM64"  },
      "hs1.8xlarge" : { "Arch" : "HVM64"  },
      "cr1.8xlarge" : { "Arch" : "HVM64"  },
      "cc2.8xlarge" : { "Arch" : "HVM64"  }
    }
  },

  "Resources" : {
    "acmCertificate": {
      "Type" : "AWS::CertificateManager::Certificate",
      "Properties" : {
        "DomainName" : {"Ref": "domainName"}
      }
    },

    "nginxElb" : {
      "Type" : "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties" : {
        "LoadBalancerName" : {"Fn::Join":["-",[{"Ref": "environmentTag"}, "nginxElb"]]},
        "Listeners" : [
          {
            "InstancePort": 80,
            "SSLCertificateId": {"Ref": "acmCertificate"},
            "LoadBalancerPort": 443,
            "Protocol": "HTTPS",
            "InstanceProtocol": "HTTP"
          }
        ],
        "HealthCheck" : {
          "Target": "TCP:80",
          "HealthyThreshold" : "3",
          "UnhealthyThreshold" : "5",
          "Interval" : "30",
          "Timeout" : "5"
        },
        "SecurityGroups" : [ {"Ref" : "elbUtilityVpcSecurityGroup"}],
        "Subnets" : [ {"Ref" : "publicSubnetId"} ],
        "Tags": [{
      		"Key":"stack",
      		"Value": {"Ref": "stackNameTag"}
      	  },{
      		"Key":"Name",
      		"Value":{"Fn::Join":["-",[{"Ref": "stackNameTag"},"nginxElb"]]}
      	   },{
      		"Key":"project",
      		"Value":{"Ref": "projectTag"}
      	   },{
      		"Key":"group",
      		"Value":{"Ref": "groupTag"}
      	   },{
      		"Key":"cost-center",
      		"Value":{"Ref": "costCenterTag"}
      	   },{
      		"Key":"environment",
      		"Value":{"Ref": "environmentTag"}
      	   },{
      		"Key":"keep-alive",
      		"Value":{"Ref": "keepAliveTag"}
      	   },{
      		"Key":"owner",
      		"Value":{"Ref": "ownerTag"}
      	   }
        ]
      },
      "DependsOn": "acmCertificate"
    },

    "nginxElbBackendConnectionErrorsAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Condition" : "doNotCreateStack",
      "Properties": {
        "AlarmDescription": "Backend Connection Errors (# > 5 for longer than 3 consecutive periods of 5 minutes)",
        "Namespace": "AWS/ELB",
        "MetricName": "BackendConnectionErrors",
        "Statistic": "Sum",
        "Period": "300",
        "EvaluationPeriods": "3",
        "Threshold": "5",
        "ComparisonOperator": "GreaterThanThreshold",
        "Dimensions": [{
          "Name": "LoadBalancerName",
          "Value" : {"Ref" : "nginxElb"}
        }],
        "AlarmActions": [{
          "Ref": "snsEc2Topic"
        }],
        "InsufficientDataActions": [{
          "Ref": "snsEc2Topic"
        }]
      }
    },

    "nginxElbLatencyAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Condition" : "doNotCreateStack",
      "Properties": {
        "AlarmDescription": "Latency alarm",
        "Namespace": "AWS/ELB",
        "MetricName": "Latency",
        "Statistic": "Maximum",
        "Period": "120",
        "EvaluationPeriods": "1",
        "Threshold": "1",
        "ComparisonOperator": "GreaterThanThreshold",
        "Dimensions": [{
          "Name": "LoadBalancerName",
          "Value" : {"Ref" : "nginxElb"}
        }],
        "AlarmActions": [{
          "Ref": "snsEc2Topic"
        }],
        "InsufficientDataActions": [{
          "Ref": "snsEc2Topic"
        }]
      }
    },

    "nginxElbRequestCountAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Condition" : "doNotCreateStack",
      "Properties": {
        "AlarmDescription": "Request Count (Sum > 75 for longer than 3 consecutive periods of 5 minutes)",
        "Namespace": "AWS/ELB",
        "MetricName": "RequestCount",
        "Statistic": "Sum",
        "Period": "300",
        "EvaluationPeriods": "3",
        "Threshold": "75",
        "ComparisonOperator": "GreaterThanThreshold",
        "Dimensions": [{
          "Name": "LoadBalancerName",
          "Value" : {"Ref" : "nginxElb"}
        }],
        "AlarmActions": [{
          "Ref": "snsEc2Topic"
        }],
        "InsufficientDataActions": [{
          "Ref": "snsEc2Topic"
        }]
      }
    },

    "privateEc2Nginx":{
		  "Type":"AWS::CloudFormation::Stack",
		  "Properties" :{
		    "Parameters" :{
					"stackNameTag": {"Ref" : "stackNameTag"},
					"projectTag": {"Ref" : "projectTag"},
					"groupTag": {"Ref" : "groupTag"},
					"costCenterTag": {"Ref" : "costCenterTag"},
					"environmentTag": {"Ref" : "environmentTag"},
					"keepAliveTag": {"Ref" : "keepAliveTag"},
					"ownerTag": {"Ref" : "ownerTag"},
					"instanceTypeNginx": {"Ref" : "instanceTypeNginx"},
		      "keyName": {"Ref" : "keyName"},
		      "snsEc2Topic": {"Ref" : "snsEc2Topic"},
		      "privateSubnetId": {"Ref" : "privateSubnetId"},
		    	"nginxSecurityGroup": {"Ref" : "nginxSecurityGroup"},
					"nginxInstanceProfile": {"Ref" : "nginxInstanceProfile"},
					"resourcesBucketName": {"Ref" : "resourcesBucketName"},
          "architecture": { "Fn::FindInMap" : [ "AWSInstanceType2Arch", { "Ref" : "instanceTypeNginx" }, "Arch" ] },
          "nginxElbName": {"Ref" : "nginxElb"},
          "latestAmiFunctionArn": { "Ref" : "latestAmiFunctionArn" }
	      },
	      "TemplateURL" : {"Fn::Join":["",["https://s3.amazonaws.com/", {"Ref": "cfTemplateBucketName"}, "/vpc/private-instances-nginx.json"]]}
		  },
      "DependsOn": "privateEc2Jenkins"
		},

    "privateEc2Jenkins":{
		  "Type":"AWS::CloudFormation::Stack",
		  "Properties" :{
		    "Parameters" :{
					"stackNameTag": {"Ref" : "stackNameTag"},
					"projectTag": {"Ref" : "projectTag"},
					"groupTag": {"Ref" : "groupTag"},
					"costCenterTag": {"Ref" : "costCenterTag"},
					"environmentTag": {"Ref" : "environmentTag"},
					"keepAliveTag": {"Ref" : "keepAliveTag"},
					"ownerTag": {"Ref" : "ownerTag"},
					"instanceTypeJenkins": {"Ref" : "instanceTypeJenkins"},
		      "keyName": {"Ref" : "keyName"},
		      "snsEc2Topic": {"Ref" : "snsEc2Topic"},
		      "privateSubnetId": {"Ref" : "privateSubnetId"},
		    	"jenkinsSecurityGroup": {"Ref" : "jenkinsSecurityGroup"},
					"jenkinsInstanceProfile": {"Ref" : "jenkinsInstanceProfile"},
					"resourcesBucketName": {"Ref" : "resourcesBucketName"},
          "architecture": { "Fn::FindInMap" : [ "AWSInstanceType2Arch", { "Ref" : "instanceTypeJenkins" }, "Arch" ] },
          "latestAmiFunctionArn": { "Ref" : "latestAmiFunctionArn" }
	      },
	      "TemplateURL" : {"Fn::Join":["",["https://s3.amazonaws.com/", {"Ref": "cfTemplateBucketName"}, "/vpc/private-instances-jenkins.json"]]}
		  }
		},

    "privateEc2Nagios":{
		  "Type":"AWS::CloudFormation::Stack",
      "Condition" : "doNotCreateStack",
		  "Properties" :{
		    "Parameters" :{
					"stackNameTag": {"Ref" : "stackNameTag"},
					"projectTag": {"Ref" : "projectTag"},
					"groupTag": {"Ref" : "groupTag"},
					"costCenterTag": {"Ref" : "costCenterTag"},
					"environmentTag": {"Ref" : "environmentTag"},
					"keepAliveTag": {"Ref" : "keepAliveTag"},
					"ownerTag": {"Ref" : "ownerTag"},
					"instanceTypeNagios": {"Ref" : "instanceTypeNagios"},
		      "keyName": {"Ref" : "keyName"},
		      "snsEc2Topic": {"Ref" : "snsEc2Topic"},
		      "privateSubnetId": {"Ref" : "privateSubnetId"},
		    	"nagiosSecurityGroup": {"Ref" : "nagiosSecurityGroup"},
					"nagiosInstanceProfile": {"Ref" : "nagiosInstanceProfile"},
					"resourcesBucketName": {"Ref" : "resourcesBucketName"},
          "architecture": { "Fn::FindInMap" : [ "AWSInstanceType2Arch", { "Ref" : "instanceTypeNagios" }, "Arch" ] },
          "latestAmiFunctionArn": { "Ref" : "latestAmiFunctionArn" }
	      },
	      "TemplateURL" : {"Fn::Join":["",["https://s3.amazonaws.com/", {"Ref": "cfTemplateBucketName"}, "/vpc/private-instances-nagios.json"]]}
		  }
		}
  },
  "Outputs" : {
  }
}
